"use strict";(self.webpackChunkdanielrive_site=self.webpackChunkdanielrive_site||[]).push([[6365],{3327:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=t(4848),o=t(8453);const s={slug:"fluentbit-cloudwatch",title:"Enabling logs and alerting in AWS EKS cluster - CloudWatch and fluent-bit",authors:["danielrivera"],tags:["aws","kubernetes"]},i=void 0,r={permalink:"/blog/fluentbit-cloudwatch",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-11-10-Enabling-logs-alerting-in-AWS-EKS-CloudWatch-and-fluent-bit.md",source:"@site/blog/2022-11-10-Enabling-logs-alerting-in-AWS-EKS-CloudWatch-and-fluent-bit.md",title:"Enabling logs and alerting in AWS EKS cluster - CloudWatch and fluent-bit",description:"robber-duck-logs",date:"2022-11-10T00:00:00.000Z",tags:[{inline:!1,label:"AWS",permalink:"/blog/tags/aws",description:"Content related with AWS"},{inline:!1,label:"Kubernetes",permalink:"/blog/tags/kubernetes",description:"Content related with Kubernetes"}],readingTime:8.005,hasTruncateMarker:!0,authors:[{name:"Daniel German Rivera",title:"Cloud Engineer",url:"https://github.com/danielrive",page:{permalink:"/blog/authors/danielrivera"},socials:{github:"https://github.com/danielrive",linkedin:"https://www.linkedin.com/in/danielrive/"},key:"danielrivera"}],frontMatter:{slug:"fluentbit-cloudwatch",title:"Enabling logs and alerting in AWS EKS cluster - CloudWatch and fluent-bit",authors:["danielrivera"],tags:["aws","kubernetes"]},unlisted:!1,prevItem:{title:"Enabling logs and alerting in AWS EKS cluster - CloudWatch Log Insights and Metric filters",permalink:"/blog/Log-Insights"},nextItem:{title:"AWS Event-Bridge and Lambda to copy RDS snapshots to another Region",permalink:"/blog/Event-Bridge-Lambda"}},l={authorsImageUrls:[void 0]},c=[{value:"Kubernetes Control Plane logging",id:"kubernetes-control-plane-logging",level:2},{value:"Kubernetes Containers logging",id:"kubernetes-containers-logging",level:2},{value:"1. Namespace creation",id:"1-namespace-creation",level:3},{value:"2. ConfigMap for aws-fluent-bit general configs",id:"2-configmap-for-aws-fluent-bit-general-configs",level:3},{value:"3.Service Account, Cluster Role and Role Binding",id:"3service-account-cluster-role-and-role-binding",level:3},{value:"4.ConfigMap for fluent-bit configurations",id:"4configmap-for-fluent-bit-configurations",level:3},{value:"5.DaemonSet Creation",id:"5daemonset-creation",level:3},{value:"References",id:"references",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsflwyqektvsf6vepwj9.jpg",alt:"robber-duck-logs"})}),"\n",(0,a.jsx)(n.p,{children:"In this post I will share my experience enabling and configuring logging in an EKS cluster, creating alerts to send a notification when a specific event appears in the logs."}),"\n",(0,a.jsx)(n.p,{children:"Logs are a fundamental component in our environments, these provide useful information that helps to debug in the case of any issue or to identify events that can affect the security of the application. Logs should be enabled in each component, from the infrastructure level to the application level. This brings some challenges like where to store the logs, what kind of events log, how to search events, and what to do with the logs."}),"\n",(0,a.jsxs)(n.p,{children:["This is the part #1 in which I show how to enable control plane logging and container logging in an EKS cluster, in ",(0,a.jsx)(n.a,{href:"https://dev.to/aws-builders/enabling-logs-and-alerting-in-eks-cluster-part-2-log-insights-and-metric-filters-3ped",children:"the part #2"})," I will show you how to enable some alerts using the logs groups created."]}),"\n",(0,a.jsx)(n.p,{children:"Before to start is important to mention that logs can contain private data like user information, keys, passwords, etc. For this reason, logs should be encrypted at rest and enable restrictions to access them."}),"\n",(0,a.jsx)(n.h2,{id:"kubernetes-control-plane-logging",children:"Kubernetes Control Plane logging"}),"\n",(0,a.jsx)(n.p,{children:"Kubernetes architecture can be divided into a control plane and worker nodes, control plane contains the components that manage the cluster, components like etcd, API Server, Scheduler, and Controller Manager. Almost every action done in the cluster pass through the API Server that logs each event."}),"\n",(0,a.jsx)(n.p,{children:"AWS EKS manages the control plane for us, deploying and operating the necessary components. By default, EKS doesn't have logging enabled and actions from our side are required. Enabling EKS control plane logging is an easy task, you need to know what component log and enable it. You can enable logs for the API server, audit, authenticator, control manager, and scheduler."}),"\n",(0,a.jsx)(n.p,{children:"In my opinion, audit logs and authenticator are useful because records actions done in our cluster and help us to understand the origin of the actions and requests generated by the IAM authenticator."}),"\n",(0,a.jsx)(n.p,{children:"By terraform you can use the following code to create a simple cluster and enabling audit,api,authenticator, and scheduler logs."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Terraform",children:'resource "aws_eks_cluster" "kube_cluster" {\n  name                      = "test-cluster"\n  role_arn                  = aws_iam_role.role-eks.arn\n  version                   = "1.22"\n  enabled_cluster_log_types = ["audit", "api", "authenticator","scheduler"]\n  vpc_config {\n    subnet_ids              = ["sub-1234","sub-5678"]\n    endpoint_private_access = true\n    endpoint_public_access  = true\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Logs are stored in AWS CloudWatch logs and the log group is created automatically following this name structure ",(0,a.jsx)(n.code,{children:"/aws/eks/<cluster-name>/cluster"}),", inside the group you can find the log stream for each component that you enabled"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"authenticator-123abcd\nkube-apiserver-123abcd\nkube-apiserver-123abcd\n"})}),"\n",(0,a.jsx)(n.p,{children:"By default, the Log group created by AWS doesn't have encryption and retention days enabled, I recommend creating the logs group by yourself and specifying and KMS Key, and setting some time to expiry the logs, Kubernetes generates a considerable number of logs that will increase the size of the group that can impact the billing."}),"\n",(0,a.jsx)(n.h2,{id:"kubernetes-containers-logging",children:"Kubernetes Containers logging"}),"\n",(0,a.jsxs)(n.p,{children:["The steps mentioned above were to enable just logging in the control plane, to send logs generated by the applications running in the containers a log aggregator is necessary, in this case, I will use ",(0,a.jsx)(n.a,{href:"https://fluentbit.io/how-it-works/",children:"Fluent-Bit"})]}),"\n",(0,a.jsx)(n.p,{children:"Fluent-Bit runs as a daemonSet in the cluster and sends logs to CloudWatch Logs. Fluent-Bit creates the log groups using the configuration specified in the kubernetes manifests."}),"\n",(0,a.jsxs)(n.p,{children:["Here is important to mention that AWS has created a docker image for the daemonSet, this can be found in this ",(0,a.jsx)(n.a,{href:"https://github.com/aws/aws-for-fluent-bit",children:"link"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-setup-logs-FluentBit.html",children:"AWS describes the steps"})," to run the daemonSet, this is done by some commands, but I will use a Kubernetes manifest that can be stored in our repository and then use Argo or Fluxcd to automate deployments."]}),"\n",(0,a.jsxs)(n.p,{children:["The following steps show the manifests to create the objects that Kubernetes needs to send containers logs to CloudWatch, you must have access to the cluster and by kubeclt command create the resources (",(0,a.jsx)(n.code,{children:"kubeckt apply -f manifest-name.yml"}),")."]}),"\n",(0,a.jsx)(n.h3,{id:"1-namespace-creation",children:"1. Namespace creation"}),"\n",(0,a.jsxs)(n.p,{children:["A K8 namespace is necessary, ",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"amazon-cloudwatch"})})," name will use for this, you can change the name but make sure to use the same in the following steps."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: amazon-cloudwatch\n  labels:\n    name: amazon-cloudwatch\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-configmap-for-aws-fluent-bit-general-configs",children:"2. ConfigMap for aws-fluent-bit general configs"}),"\n",(0,a.jsxs)(n.p,{children:["This configMap is necessary to specify some configurations for fluent-bit and for AWS, for instance, the cluster-name AWS use to create the logs group. In this case, I don't want to create an HTTP server for fluent-bit and I will read the logs from the tail, more information about this can be found ",(0,a.jsx)(n.a,{href:"https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/classic-mode/configuration-file",children:"here"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fluent-bit-general-configs ## you can use a different name, make sure to use the same in the following steps\n  namespace: amazon-cloudwatch\ndata:\n  cluster.name: ${CLUSTERNAME}\n  http.port: ""\n  http.server: "Off"\n  logs.region: ${AWS_REGION}\n  read.head: "Off"\n  read.tail: "On" \n'})}),"\n",(0,a.jsx)(n.h3,{id:"3service-account-cluster-role-and-role-binding",children:"3.Service Account, Cluster Role and Role Binding"}),"\n",(0,a.jsx)(n.p,{children:"Some permissions are required to send logs from daemonSet to Cloudwatch, you can attach a role to the worker-nodes or use a service account with an IAM role, in this case, I will create an IAM role and associate it with a service account.\nThe following Terraform code creates a policy and the role."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Terraform",children:'resource "aws_iam_role" "iam-role-fluent-bit" {\n  name                  = "role-fluent-bit-test"\n  force_detach_policies = true\n  max_session_duration  = 3600\n  path                  = "/"\n  assume_role_policy    = jsonencode({\n\n{\n    Version= "2012-10-17"\n    Statement= [\n      {\n        Effect= "Allow"\n        Principal= {\n            Federated= "arn:aws:iam::${ACCOUNT_ID}:oidc-provider/oidc.eks.${REGION}.amazonaws.com/id/${EKS_OIDCID}"\n        }\n        Action= "sts:AssumeRoleWithWebIdentity"\n        Condition= {\n          StringEquals= {\n            "oidc.eks.${REGION}.amazonaws.com/id/${EKS_OIDCID}:aud": "sts.amazonaws.com",\n"oidc.eks.${REGION}.amazonaws.com/id/${EKS_OIDCID}:sub": "system:serviceaccount:${AWS_CLOUDWATCH_NAMESPACE}:${EKS-SERVICE_ACCOUNT-NAME}"\n          }\n        }\n      }\n    ]\n  }\n\n})\n\n}\n\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"EKS_OIDCID:"})," is the OpenID Connect for your cluster, you can get it in the cluster information or by terraform outputs."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"AWS_CLOUDWATCH_NAMESPACE:"})," is the namespace create in the step 1, in this case amazon-cloudwatch."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ACCOUNT_ID:"})," is the AWS account number where the cluster was created."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The role needs a policy with permissions to create and put logs in cloudwatch, you can use the following code to create the policy and attach it to IAM Role created."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Terraform",children:'\nresource "aws_iam_policy" "policy_sa_logs" {\n  name        = "policy-sa-fluent-bit-logs"\n  path        = "/"\n  description = "policy for EKS Service Account fluent-bit "\n  policy = <<EOF\n{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Action": [\n                "cloudwatch:PutMetricData",\n                "ec2:DescribeVolumes",\n                "ec2:DescribeTags",\n                "logs:PutLogEvents",\n                "logs:DescribeLogStreams",\n                "logs:DescribeLogGroups",\n                "logs:CreateLogStream",\n                "logs:CreateLogGroup",\n                "logs:PutRetentionPolicy"\n            ],\n            "Resource": "arn:aws:logs:${REGION}:${ACCOUNT_ID}:*:*"\n        }\n    ]\n}\nEOF\n}\n\n######## Policy attachment to IAM role ########\n\nresource "aws_iam_role_policy_attachment" "policy-attach" {\n  role       = aws_iam_role.iam-role-fluent-bit.name\n  policy_arn = aws_iam_policy.policy_sa_logs.arn\n}\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"Once the role has been created the Service account can be created, you can use the following k8 manifest for that, you should replace the IAM_ROLE variable for the ARN of the role created previously."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: fluent-bit\n  namespace: amazon-cloudwatch\n  annotations:\n    eks.amazonaws.com/role-arn: "${IAM_ROLE}"\n'})}),"\n",(0,a.jsx)(n.p,{children:"With the SA ready, you need to create a cluster role and associate that to the SA created, the following manifests can be used for that."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: fluent-bit-role\nrules:\n  - nonResourceURLs:\n      - /metrics\n    verbs:\n      - get\n  - apiGroups: [""]\n    resources:\n      - namespaces\n      - pods\n      - pods/logs\n      - nodes\n      - nodes/proxy\n    verbs: ["get", "list", "watch"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: fluent-bit-role-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: fluent-bit-role\nsubjects:\n  - kind: ServiceAccount\n    name: fluent-bit\n    namespace: amazon-cloudwatch\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4configmap-for-fluent-bit-configurations",children:"4.ConfigMap for fluent-bit configurations"}),"\n",(0,a.jsxs)(n.p,{children:["A ConfigMap is used to specify a detailed configuration for Fluent-bit, AWS already defines a configuration, but you can add custom configs, The following ",(0,a.jsx)(n.a,{href:"https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/fluent-bit/fluent-bit.yaml",children:"link"}),", shows the configurations defined by AWS, if you see, the first objects created in the YAML are the manifest defined in previous steps, in this step you just need to define the ConfigMap with name ",(0,a.jsx)(n.em,{children:"fluent-bit-config"}),", I don't want to put here all the manifest because is a little long and can complicate the lecture of this post."]}),"\n",(0,a.jsx)(n.p,{children:"With this ConfigMap, Fluent Bit will create the log groups in the below table, you also have the option to create by terraform and specify encryption and retention period (i recommend this way)."}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"CloudWatch Log Group Name"}),(0,a.jsx)(n.th,{children:"Source of the logs(Path inside the Container)"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"aws/containerinsights/Cluster_Name/application"}),(0,a.jsx)(n.td,{children:"All log files in /var/log/containers"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"/aws/containerinsights/Cluster_Name/host"}),(0,a.jsx)(n.td,{children:"Logs from /var/log/dmesg, /var/log/secure, and /var/log/messages"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"/aws/containerinsights/Cluster_Name/dataplane"}),(0,a.jsx)(n.td,{children:"The logs in /var/log/journal for kubelet.service, kubeproxy.service, and docker.service."})]})]})]}),"\n",(0,a.jsx)(n.p,{children:"If you analyze the ConfigMap you can see the INPUTS for each source mentioned in the table."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fluent-bit-config\n  namespace: amazon-cloudwatch\n  labels:\n    k8s-app: fluent-bit\n\n... OTHER CONFIGS \n\n### here is the INPUT configurations for application logs  \napplication-log.conf: |\n    [INPUT]\n        Name                tail\n        Tag                 application.*\n        Exclude_Path        /var/log/containers/cloudwatch-agent*, /var/log/containers/fluent-bit*, /var/log/containers/aws-node*, /var/log/containers/kube-proxy*\n        Path                /var/log/containers/*.log\n\n... OTHER CONFIGS \n\n    [OUTPUT]\n        Name                cloudwatch_logs\n        Match               application.*\n        region              $${AWS_REGION}\n        log_group_name      /aws/containerinsights/$${CLUSTER_NAME}/application\n        log_stream_prefix   $${HOST_NAME}-\n        auto_create_group   false\n        extra_user_agent    container-insights\n        log_retention_days  ${logs_retention_period} \n\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The OUTPUT in the previous manifest defines the CloudWatch log Group configuration that fluent bit will create, as you can see you can specify if the log groups should be created, the prefix for the stream, the name, and the retention period for the logs. If you are using Terraform you should set to false the option ",(0,a.jsx)(n.em,{children:"auto_create_group"})]}),"\n",(0,a.jsx)(n.h3,{id:"5daemonset-creation",children:"5.DaemonSet Creation"}),"\n",(0,a.jsxs)(n.p,{children:["This is the last step, AWS also provides the manifest to create the DaemonSet, in this ",(0,a.jsx)(n.a,{href:"https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/fluent-bit/fluent-bit.yaml",children:"link"})," you can find it in the bottom of the file. As I mentioned, I don't want to put the whole file here, you can copy and paste the content or edit the file if you have custom configurations."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluent-bit\n  namespace: amazon-cloudwatch\n  labels:\n    k8s-app: fluent-bit\n... OTHER CONFIGS\n"})}),"\n",(0,a.jsx)(n.p,{children:"Once you have run the above steps, you can validate that the daemonSet is running well and if everything is ok you should be the Logs groups in the AWS console with some events passed by fluent-bit DaemonSet"}),"\n",(0,a.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-setup-logs-FluentBit.html",children:"Container-Insights-setup-logs-FluentBit"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.fluentbit.io/manual/pipeline/outputs/cloudwatch",children:"fluentbit official"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var a=t(6540);const o={},s=a.createContext(o);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);